/*
    This file is part of the example codes which have been used
    for the "Code Optmization Workshop".
    
    Copyright (C) 2016  Fabio Baruffa <fbaru-dev@gmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "GSimulation.hpp"
#include "cpu_time.hpp"

#include <sycl/sycl.hpp>

GSimulation :: GSimulation()
{
  std::cout << "===============================" << std::endl;
  std::cout << " Initialize Gravity Simulation" << std::endl;
  set_npart(16000); 
  set_nsteps(10);
  set_tstep(0.1); 
  set_sfreq(1);
}

void GSimulation :: set_number_of_particles(int N)  
{
  set_npart(N);
}

void GSimulation :: set_number_of_steps(int N)  
{
  set_nsteps(N);
}

void GSimulation :: init_pos()  
{
  std::random_device rd;	//random number generator
  std::mt19937 gen(42);      
  std::uniform_real_distribution<real_type> unif_d(0,1.0);
  
  for(int i=0; i<get_npart(); ++i)
  {
    particles[i].pos[0] = unif_d(gen);
    particles[i].pos[1] = unif_d(gen);
    particles[i].pos[2] = unif_d(gen);
  }
}

void GSimulation :: init_vel()  
{
  std::random_device rd;        //random number generator
  std::mt19937 gen(42);
  std::uniform_real_distribution<real_type> unif_d(-1.0,1.0);

  for(int i=0; i<get_npart(); ++i)
  {
    particles[i].vel[0] = unif_d(gen) * 1.0e-3f;
    particles[i].vel[1] = unif_d(gen) * 1.0e-3f;
    particles[i].vel[2] = unif_d(gen) * 1.0e-3f; 
  }
}

void GSimulation :: init_acc() 
{
  for(int i=0; i<get_npart(); ++i)
  {
    particles[i].acc[0] = 0.f; 
    particles[i].acc[1] = 0.f;
    particles[i].acc[2] = 0.f;
  }
}

void GSimulation :: init_mass() 
{
  real_type n   = static_cast<real_type> (get_npart());
  std::random_device rd;        //random number generator
  std::mt19937 gen(42);
  std::uniform_real_distribution<real_type> unif_d(0.0,1.0);

  for(int i=0; i<get_npart(); ++i)
  {
    particles[i].mass = n * unif_d(gen); 
  }
}

void GSimulation :: get_acceleration(sycl::queue Q, int n, ParticleSoA *ptcs)
{
  const float softeningSquared = 1e-3f;
  const float G = 6.67259e-11f;

  const int TILE_SIZE = 64;
  const size_t size = n;

  auto global_range = sycl::nd_range<1>(
    {(size + TILE_SIZE - 1) / TILE_SIZE * TILE_SIZE},
    {TILE_SIZE});

    Q.submit([&](sycl::handler &h) { 

      auto local = sycl::local_accessor<ParticleSoA, 1>(TILE_SIZE, h);

      h.parallel_for(global_range, [=](sycl::nd_item<1> item) {
        const int lid = item.get_local_id(0);
        const int gid = item.get_global_id(0);

        real_type xi = ptcs[gid].acc[0];
        real_type yi = ptcs[gid].acc[1];
        real_type zi = ptcs[gid].acc[2];

        real_type ax = 0.0f, ay = 0.0f, az = 0.0f;

        for (int tile_base = 0; tile_base < size; tile_base += TILE_SIZE) {
          const int load_idx = tile_base + lid;
          if (load_idx < n) {
            local[lid] = ptcs[load_idx];
          }
          item.barrier(sycl::access::fence_space::local_space);

        
          const int tile_end = sycl::min(tile_base + TILE_SIZE, n);

          for (int j = 0; j < TILE_SIZE; j++) {
            const int particle_idx = tile_base + j;
            if (particle_idx >= tile_end) break;
            if (particle_idx == gid) continue; // No interacciona con si misma

            const ParticleAoS pj = local[j];
            const real_type dx = pj.pos[0] - xi;
            const real_type dy = pj.pos[1] - yi;
            const real_type dz = pj.pos[2] - zi;

            // Calculate distance with softening
            const real_type distanceSqr = dx * dx + dy * dy + dz * dz + softeningSquared;
            const real_type distanceInv = sycl::rsqrt(distanceSqr);
            const real_type invDistCube = distanceInv * distanceInv * distanceInv;
            
            // Calculate acceleration contribution
            const real_type factor = G * pj.mass * invDistCube;
            ax += dx * factor;
            ay += dy * factor;
            az += dz * factor;
          }
        item.barrier(sycl::access::fence_space::local_space);
      }

      // Store final acceleration
      ptcs[gid].acc[0] = ax;
      ptcs[gid].acc[1] = ay;
      ptcs[gid].acc[2] = az;
      

        /*
                for (int j = 0; j < n; j++) {
          real_type dx, dy, dz;
          real_type distanceSqr = 0.0f;
          real_type distanceInv = 0.0f;
            
          dx = ptcs[j].pos[0] - ptcs[gid_x].pos[0];	//1flop
          dy = ptcs[j].pos[1] - ptcs[gid_x].pos[1];	//1flop	
          dz = ptcs[j].pos[2] - ptcs[gid_x].pos[2];	//1flop
        
          distanceSqr = dx*dx + dy*dy + dz*dz + softeningSquared;	//6flops
          distanceInv = 1.0f / sqrtf(distanceSqr);			//1div+1sqrt
        
          ax_i += dx * G * ptcs[j].mass * distanceInv * distanceInv * distanceInv; //6flops
          ay_i += dy * G * ptcs[j].mass * distanceInv * distanceInv * distanceInv; //6flops
          az_i += dz * G * ptcs[j].mass * distanceInv * distanceInv * distanceInv; //6flops
        }
        ptcs[gid_x].acc[0] = ax_i;
        ptcs[gid_x].acc[1] = ay_i;
        ptcs[gid_x].acc[2] = az_i;
        */

      });
    }).wait();
}

real_type GSimulation :: updateParticles(sycl::queue Q, const int n, real_type dt, ParticleSoA *ptcs, real_type *energy)
{
  int i;
  *energy = 0;

  const int TILE_SIZE = 64;
  size_t size = n;

  auto reduction_energy = sycl::reduction(energy, sycl::plus<>());

  auto global_range = sycl::nd_range<1>(
  {(size + TILE_SIZE - 1) / TILE_SIZE * TILE_SIZE},
  {TILE_SIZE});

  Q.submit([&](sycl::handler &h) { 

    auto local = sycl::local_accessor<ParticleSoA, 1>(TILE_SIZE, h);

    h.parallel_for(global_range, reduction_energy, [=](sycl::nd_item<1> item, auto &energy_sum) {
      const int lid_x = item.get_local_id(0);
      const int gid_x = item.get_global_id(0);

      if (gid_x >= size) return;

      local[lid_x] = ptcs[gid_x];

      local[lid_x].vel[0] += local[lid_x].acc[0] * dt; //2flops
      local[lid_x].vel[1] += local[lid_x].acc[1] * dt; //2flops
      local[lid_x].vel[2] += local[lid_x].acc[2] * dt; //2flops
     
      local[lid_x].pos[0] += local[lid_x].vel[0] * dt; //2flops
      local[lid_x].pos[1] += local[lid_x].vel[1] * dt; //2flops
      local[lid_x].pos[2] += local[lid_x].vel[2] * dt; //2flops
 
      local[lid_x].acc[0] = 0.;
      local[lid_x].acc[1] = 0.;
      local[lid_x].acc[2] = 0.;
   
      energy_sum += local[lid_x].mass * (
        local[lid_x].vel[0]*local[lid_x].vel[0] + 
        local[lid_x].vel[1]*local[lid_x].vel[1] +
        local[lid_x].vel[2]*local[lid_x].vel[2]); //7flops

      ptcs[gid_x] = local[lid_x];
    });
  }).wait();

  return *energy;
}

void GSimulation :: start(sycl::queue Q) 
{
  real_type energy;
  real_type dt = get_tstep();
  int n = get_npart();

  //allocate particles
  particles = new ParticleSoA[n];

  init_pos();
  init_vel();
  init_acc();
  init_mass();
  
  print_header();
  
  _totTime = 0.; 
  
  
  CPUTime time;
  double ts0 = 0;
  double ts1 = 0;
  double nd = double(n);
  double gflops = 1e-9 * ( (11. + 18. ) * nd*nd  +  nd * 19. );
  double av=0.0, dev=0.0;
  int nf = 0;
  
  ParticleSoA *ptcs = sycl::malloc_shared<ParticleSoA>(n, Q);
  real_type *energy_usm = sycl::malloc_shared<real_type>(1, Q);

  const double t0 = time.start();
  for (int s=1; s<=get_nsteps(); ++s)
  {   
    
    *energy_usm = 0;
    
    ts0 += time.start(); 
    for (int i = 0; i < n; ++i) {
      ptcs[i] = particles[i];
    }

    get_acceleration(Q, n, ptcs);


    energy = updateParticles(Q, n, dt, ptcs, energy_usm);
    _kenergy = 0.5 * energy; 
    
    for (int i = 0; i < n; ++i) {
      particles[i] = ptcs[i];
    }
    ts1 += time.stop();


    if(!(s%get_sfreq()) ) 
    {
      nf += 1;      
      std::cout << " " 
		<<  std::left << std::setw(8)  << s
		<<  std::left << std::setprecision(5) << std::setw(8)  << s*get_tstep()
		<<  std::left << std::setprecision(5) << std::setw(12) << _kenergy
		<<  std::left << std::setprecision(5) << std::setw(12) << (ts1 - ts0)
		<<  std::left << std::setprecision(5) << std::setw(12) << gflops*get_sfreq()/(ts1 - ts0)
		<<  std::endl;
      if(nf > 2) 
      {
	av  += gflops*get_sfreq()/(ts1 - ts0);
	dev += gflops*get_sfreq()*gflops*get_sfreq()/((ts1-ts0)*(ts1-ts0));
      }
      
      ts0 = 0;
      ts1 = 0;
    }
  
  } //end of the time step loop

  sycl::free(ptcs, Q);
  
  const double t1 = time.stop();
  _totTime  = (t1-t0);
  _totFlops = gflops*get_nsteps();
  
  av/=(double)(nf-2);
  dev=sqrt(dev/(double)(nf-2)-av*av);
  

  std::cout << std::endl;
  std::cout << "# Total Time (s)      : " << _totTime << std::endl;
  std::cout << "# Average Performance : " << av << " +- " <<  dev << std::endl;
  std::cout << "===============================" << std::endl;

}


void GSimulation :: print_header()
{
	    
  std::cout << " nPart = " << get_npart()  << "; " 
	    << "nSteps = " << get_nsteps() << "; " 
	    << "dt = "     << get_tstep()  << std::endl;
	    
  std::cout << "------------------------------------------------" << std::endl;
  std::cout << " " 
	    <<  std::left << std::setw(8)  << "s"
	    <<  std::left << std::setw(8)  << "dt"
	    <<  std::left << std::setw(12) << "kenergy"
	    <<  std::left << std::setw(12) << "time (s)"
	    <<  std::left << std::setw(12) << "GFlops"
	    <<  std::endl;
  std::cout << "------------------------------------------------" << std::endl;


}

GSimulation :: ~GSimulation()
{
  delete particles;
}


/*
===============================
 Initialize Gravity Simulation
 nPart = 16000; nSteps = 10; dt = 0.1
------------------------------------------------
 s       dt      kenergy     time (s)    GFlops      
------------------------------------------------
 1       0.1     26.405      0.34402     21.581      
 2       0.2     313.77      0.34162     21.733      
 3       0.3     926.56      0.34612     21.45       
 4       0.4     1866.4      0.34455     21.548      
 5       0.5     3135.6      0.34512     21.512      
 6       0.6     4737.6      0.35076     21.166      
 7       0.7     6676.6      0.35515     20.905      
 8       0.8     8957.7      0.34663     21.419      
 9       0.9     11587       0.34767     21.355      
 10      1       14572       0.34054     21.802      

# Total Time (s)      : 3.4626
# Average Performance : 21.395 +- 0.25001

*/
